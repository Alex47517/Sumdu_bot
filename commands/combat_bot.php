<?php
//
// Command: combat #
// Callback: combat-bot #
// Display: combat-bot #
// Info: –ú–æ–¥—É–ª—å –¥–ª—è –≥—Ä–∏ "Combat" (–ø—Ä–æ—Ç–∏ –±–æ—Ç–∞) #
// Syntax: - #
// Args: 0 #
// Rank: USER #
//
use api\{Bot as Bot, chat as chat, ChatMember as ChatMember, Log as Log, update as update};
function countAliveWarriors() {
    global $user;
    $aliveCount = 0;
    for ($i = 1; $user->LocalStorageGet('warrior_' . $i); $i++) {
        if ($user->LocalStorageGet('warrior_health_' . $i) > 0) {
            $aliveCount++;
        }
    }
    return $aliveCount;
}
function countBotAliveWarriors() {
    global $user;
    $aliveCount = 0;
    for ($i = 1; $user->LocalStorageGet('warrior_name_' . $i); $i++) {
        if ($user->LocalStorageGet('bot-warrior_health_' . $i) > 0) {
            $aliveCount++;
        }
    }
    return $aliveCount;
}
function getBlockedCords() {
    global $user;
    $coords = [];
    for ($i = 1; $user->LocalStorageGet('warrior_'.$i); $i++) {
        $coords[] = [$user->LocalStorageGet('warrior_location-x_'.$i), $user->LocalStorageGet('warrior_location-y_'.$i)];
    }
    for ($i = 1; $user->LocalStorageGet('bot-warrior_name_'.$i); $i++) {
        $coords[] = [$user->LocalStorageGet('bot-warrior_location-x_'.$i), $user->LocalStorageGet('bot-warrior_location-y_'.$i)];
    }
    return $coords;
}
function check_canMove($current, $destination, $n = 8) {
    $dx = $destination[0] - $current[0];
    $dy = $destination[1] - $current[1];

    if ($destination[0] < 0 || $destination[0] >= $n || $destination[1] < 0 || $destination[1] >= $n) {
        return false;
    }

    if ((abs($dx) <= 1) && (abs($dy) <= 1)) {
        // –ü–æ–ª—É—á–∞–µ–º –º–∞—Å—Å–∏–≤ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∫–ª–µ—Ç–æ–∫
        $blockedCords = getBlockedCords();
        foreach ($blockedCords as $coord) {
            if ($coord[0] == $destination[0] && $coord[1] == $destination[1]) {
                return false; // –≠—Ç–∞ –∫–ª–µ—Ç–∫–∞ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–∞
            }
        }
        return true; // –ö–ª–µ—Ç–∫–∞ —Å–≤–æ–±–æ–¥–Ω–∞ –∏ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –Ω–∞ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–∏ –≤ –æ–¥–Ω—É –∫–ª–µ—Ç–∫—É
    }

    return false;
}
function getField() {
    global $user;
    for ($x = 0; $x < 8; $x++) {
        for ($y = 0; $y < 8; $y++) {
            $find = false;
            for ($i = 1; $user->LocalStorageGet('warrior_'.$i); $i++) {
                if ($user->LocalStorageGet('warrior_location-x_'.$i) == $x && $user->LocalStorageGet('warrior_location-y_'.$i) == $y) {
                    if ($user->LocalStorageGet('warrior_type_'.$i) == 'infantry') {
                        if ($user->LocalStorageGet('selected') != $i) $emoji = 'üî∏';
                        else $emoji = 'üî∂';
                    } else {
                        if ($user->LocalStorageGet('selected') != $i) $emoji = 'üîπ';
                        else $emoji = 'üî∑';
                    }
                    if ($user->LocalStorageGet('warrior_health_'.$i) <= 0) {
                        $emoji = '...';
                    }
                    $select_id = $i;
                    $find = true;
                } elseif ($user->LocalStorageGet('bot-warrior_location-x_'.$i) == $x && $user->LocalStorageGet('bot-warrior_location-y_'.$i) == $y) {
                    if ($user->LocalStorageGet('bot-warrior_type_'.$i) == 'infantry') {
                        $emoji = 'üîª';
                    } else {
                        $emoji = 'üî∫';
                    }
                    if ($user->LocalStorageGet('bot-warrior_health_'.$i) <= 0) {
                        $emoji = '...';
                    }
                    $select_id = $i;
                    $find = true;
                }
            }
            if ($find && $emoji != '...') {
                if ($emoji == 'üîª' or $emoji == 'üî∫') {
                    $keyboard[$y][$x]['text'] = $emoji;
                    $keyboard[$y][$x]['callback_data'] = 'combat-bot_attack_' . $select_id;
                } else {
                    $keyboard[$y][$x]['text'] = $emoji;
                    $keyboard[$y][$x]['callback_data'] = 'combat-bot_select_' . $select_id;
                }
            } else {
                $keyboard[$y][$x]['text'] = '...';
                $keyboard[$y][$x]['callback_data'] = 'combat-bot_coords_'.$x.'_'.$y;
            }
        }
    }
    return $keyboard;
}
function update() {
    global $user;
    global $chat;
    $keyboard = getField();
    $chat->editMessageText('‚öî <b>Combat</b>
–î–æ—Å—Ç—É–ø–Ω–æ —Ö–æ–¥—ñ–≤: <b>'.$user->LocalStorageGet('aliveCount').'</b>', ['inline_keyboard' => $keyboard], update::$btn_id);
}
function distance($point1, $point2) {
    $dx = abs($point1[0] - $point2[0]);
    $dy = abs($point1[1] - $point2[1]);
    // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∏–∑ –¥–≤—É—Ö —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–π, —á—Ç–æ–±—ã —É—á–µ—Å—Ç—å –¥–≤–∏–∂–µ–Ω–∏–µ –ø–æ –¥–∏–∞–≥–æ–Ω–∞–ª–∏
    return max($dx, $dy);
}
function check_bot_move() {
    global $user, $chat;
    if ($user->LocalStorageGet('aliveCount') <= 0) {
        $aliveBotCount = countBotAliveWarriors();
        $user->LocalStorageSet('countBotAliveWarriors', $aliveBotCount);
        for ($i = $user->LocalStorageGet('NextBotIndex'); $i < $aliveBotCount; $i++) {
            $user->LocalStorageSet('NextBotIndex', ($i+1));
            sleep(1);
            BotMove(($i+1));
        }
        $user->LocalStorageSet('aliveCount', countAliveWarriors());
        update();
    }
}
function getBestMoveForBotWarrior($botId) {
    global $user, $chat;

    $botPosition = [
        $user->LocalStorageGet('bot-warrior_location-x_' . $botId),
        $user->LocalStorageGet('bot-warrior_location-y_' . $botId)
    ];
    $botType = $user->LocalStorageGet('bot-warrior_type_' . $botId);

    $closestPlayerWarrior = null;
    $minDistance = PHP_INT_MAX;

    for ($i = 1; $user->LocalStorageGet('warrior_' . $i); $i++) {
        $playerWarriorHealth = $user->LocalStorageGet('warrior_health_' . $i);
        // –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å, –µ—Å–ª–∏ –≤–æ–∏–Ω –º–µ—Ä—Ç–≤
        if ($playerWarriorHealth <= 0) {
            continue;
        }

        $playerWarriorPosition = [
            $user->LocalStorageGet('warrior_location-x_' . $i),
            $user->LocalStorageGet('warrior_location-y_' . $i)
        ];

        $currentDistance = distance($botPosition, $playerWarriorPosition);
        if ($currentDistance < $minDistance) {
            $minDistance = $currentDistance;
            $closestPlayerWarrior = $playerWarriorPosition;
        }
    }

    if (!$closestPlayerWarrior) {
        return null;  // –ï—Å–ª–∏ –Ω–µ—Ç –∂–∏–≤—ã—Ö –≤–æ–∏–Ω–æ–≤ –∏–≥—Ä–æ–∫–∞
    }
    $deltaX = abs($botPosition[0] - $closestPlayerWarrior[0]);
    $deltaY = abs($botPosition[1] - $closestPlayerWarrior[1]);
    $actualDistance = max($deltaX, $deltaY);

// –ï—Å–ª–∏ —Ç–∏–ø –±–æ—Ç–∞ infantry –∏ –∏–≥—Ä–æ–∫ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è —Ä—è–¥–æ–º, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º null
    if ($botType === 'infantry' && $actualDistance == 1) {
        return null;
    }

// –ï—Å–ª–∏ —Ç–∏–ø –±–æ—Ç–∞ archer –∏ –∏–≥—Ä–æ–∫ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Ä–∞–¥–∏—É—Å–µ 2—Ö –∫–ª–µ—Ç–æ–∫, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º null
    if ($botType === 'archer' && $actualDistance <= 2) {
        return null;
    }

    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –æ–ø—Ç–∏–º–∞–ª—å–Ω–æ–µ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ –≤–æ–∏–Ω–∞ –±–æ—Ç–∞
    $desiredDistance = $botType === 'infantry' ? 1 : 2;
    $bestMove = null;

    // –ù–∞—Ö–æ–¥–∏–º –Ω–∞–∏–ª—É—á—à–∏–π —Ö–æ–¥
    $dx = [-1, -1, -1, 0, 1, 1, 1, 0];
    $dy = [-1, 0, 1, 1, 1, 0, -1, -1];
    $bestDistance = PHP_INT_MAX;
    for ($i = 0; $i < 8; $i++) {
        $newX = $botPosition[0] + $dx[$i];
        $newY = $botPosition[1] + $dy[$i];
        if ($newX >= 0 && $newY >= 0 && $newX < 8 && $newY < 8) {
            $newPos = [$newX, $newY];
            $newDistance = distance($newPos, $closestPlayerWarrior);
            if (isPositionBlockedByBot($newPos)) {
                continue;
            }
            if ($botType == 'infantry') {
                if ($newDistance == $desiredDistance) {
                    $bestMove = $newPos;
                    $bestDistance = $newDistance;
                    break;  // –ï—Å–ª–∏ –Ω–∞–π–¥–µ–Ω–æ –∏–¥–µ–∞–ª—å–Ω–æ–µ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ, –∑–∞–≤–µ—Ä—à–∞–µ–º —Ü–∏–∫–ª
                } elseif ($newDistance < $bestDistance) {
                    $bestMove = $newPos;  // –ï—Å–ª–∏ –Ω–µ—Ç –∏–¥–µ–∞–ª—å–Ω–æ–≥–æ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—è, –≤—ã–±–∏—Ä–∞–µ–º –Ω–∞–∏–º–µ–Ω—å—à–µ–µ
                    $bestDistance = $newDistance;
                }
            } elseif ($botType == 'archer') {
                if ($newDistance == $desiredDistance) { // –ª—É—á–Ω–∏–∫ –ø—ã—Ç–∞–µ—Ç—Å—è –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—Ç—å –¥–∏—Å—Ç–∞–Ω—Ü–∏—é –≤ 2 –∫–ª–µ—Ç–∫–∏
                    $bestMove = $newPos;
                    break;
                } elseif ($newDistance < $bestDistance && $newDistance > 2) {
                    // –ª—É—á–Ω–∏–∫ –ø—ã—Ç–∞–µ—Ç—Å—è –ø—Ä–∏–±–ª–∏–∑–∏—Ç—å—Å—è, –µ—Å–ª–∏ –∏–≥—Ä–æ–∫ –¥–∞–ª—å—à–µ —á–µ–º –Ω–∞ 2 –∫–ª–µ—Ç–∫–∏
                    $bestMove = $newPos;
                    $bestDistance = $newDistance;
                }
            }
        }
    }
    return $bestMove;
}
function mt_rant($min, $max, $exclude) {
    $numbers = range($min, $max);
    $key = array_search($exclude, $numbers);

    if ($key !== false) {
        unset($numbers[$key]);
    }

    return $numbers[array_rand($numbers)];
}
function isPositionBlockedByBot($position) {
    global $user;
    for ($i = 1; $user->LocalStorageGet('bot-warrior_name_' . $i); $i++) {
        $botX = $user->LocalStorageGet('bot-warrior_location-x_' . $i);
        $botY = $user->LocalStorageGet('bot-warrior_location-y_' . $i);
        if ($botX == $position[0] && $botY == $position[1]) {
            return true;
        }
    }
    return false;
}
function getClosestPlayerWarriorId($botId) {
    global $user;

    $botPosition = [
        $user->LocalStorageGet('bot-warrior_location-x_' . $botId),
        $user->LocalStorageGet('bot-warrior_location-y_' . $botId)
    ];

    $closestPlayerWarriorId = null;
    $minDistance = PHP_INT_MAX;

    for ($i = 1; $user->LocalStorageGet('warrior_' . $i); $i++) {
        $playerHealth = $user->LocalStorageGet('warrior_health_' . $i);

        if ($playerHealth > 0) {  // –¢–æ–ª—å–∫–æ –∂–∏–≤—ã–µ –≤–æ–∏–Ω—ã
            $playerWarriorPosition = [
                $user->LocalStorageGet('warrior_location-x_' . $i),
                $user->LocalStorageGet('warrior_location-y_' . $i)
            ];

            $currentDistance = distance($botPosition, $playerWarriorPosition);

            if ($currentDistance < $minDistance) {
                $minDistance = $currentDistance;
                $closestPlayerWarriorId = $i;
            }
        }
    }

    return $closestPlayerWarriorId;
}
function checkAliveWarriors() {
    global $user;

    $playerHasAliveWarriors = false;
    $botHasAliveWarriors = false;

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∂–∏–≤—ã—Ö –≤–æ–∏–Ω–æ–≤ —É –∏–≥—Ä–æ–∫–∞
    $player_warrior_id = 1;
    while ($user->LocalStorageGet('warrior_health_' . $player_warrior_id) !== null) {
        if ($user->LocalStorageGet('warrior_health_' . $player_warrior_id) > 0) {
            $playerHasAliveWarriors = true;
            break;
        }
        $player_warrior_id++;
    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∂–∏–≤—ã—Ö –≤–æ–∏–Ω–æ–≤ —É –±–æ—Ç–∞
    $bot_warrior_id = 1;
    while ($user->LocalStorageGet('bot-warrior_health_' . $bot_warrior_id) !== null) {
        if ($user->LocalStorageGet('bot-warrior_health_' . $bot_warrior_id) > 0) {
            $botHasAliveWarriors = true;
            break;
        }
        $bot_warrior_id++;
    }

    return [
        'playerHasAliveWarriors' => $playerHasAliveWarriors,
        'botHasAliveWarriors' => $botHasAliveWarriors
    ];
}
function end_attack($bot_id, $player_id, $type, $player_attack = false) {
    global $user, $chat;
    if ($player_attack) {
        //–ê—Ç–∞–∫–∞ –≥—Ä–∞–≤—Ü—è
        if (!mt_rand(0, 3)) {
            $protect_type = mt_rant(1, 3, $type);
        } else {
            $protect_type = mt_rand(1, 3);
        }
        $minus = mt_rand(($user->LocalStorageGet('warrior_level_'.$player_id)*5+5), ($user->LocalStorageGet('warrior_level_'.$player_id)*6+10));
        if ($type == $protect_type && $user->LocalStorageGet('bot-warrior_shield_'.$bot_id) > 0) {
            $new_shield_value = $user->LocalStorageGet('bot-warrior_shield_'.$bot_id)-$minus;
            if ($new_shield_value < 0) {
                $text = '‚ùó –©–∏—Ç –∑–∞—Ö–∏—Å—Ç–∏–≤ –≤–æ—ó–Ω–∞, –∞–ª–µ –≤—ñ–Ω –∑–ª–∞–º–∞–≤—Å—è';
                $user->LocalStorageSet('bot-warrior_shield_'.$bot_id, 0);
            } else {
                $text = 'üõ° –í–∏ –ø–æ—à–∫–æ–¥–∏–ª–∏ —â–∏—Ç (-'.$minus.' –º—ñ—Ü–Ω–æ—Å—Ç—ñ)';
                $user->LocalStorageSet('bot-warrior_shield_'.$bot_id, $new_shield_value);
            }
        } else {
            $new_hp_value = $user->LocalStorageGet('bot-warrior_health_'.$player_id)-$minus;
            if ($new_hp_value < 0) {
                $text = 'üíî –í–∏ –≤–±–∏–ª–∏ –≤–æ—ó–Ω–∞';
                $user->LocalStorageSet('bot-warrior_health_'.$bot_id, 0);
            } else {
                $user->LocalStorageSet('bot-warrior_health_'.$bot_id, $new_hp_value);
                $text = 'ü©∏ –í–æ—ó–Ω–∞ –ø–æ—Ä–∞–Ω–µ–Ω–æ! (-'.$minus.'‚ù§) => '.$user->LocalStorageGet('bot-warrior_health_'.$bot_id).'‚ù§';
            }
        }
        $chat->answerCallbackQuery($text, true);
    } else {
        if ($type > 0 && $user->LocalStorageGet('warrior_shield_'.$player_id) <= 0) {
            $chat->answerCallbackQuery('üí¢ –¢–∏ –Ω–µ –º–æ–∂–µ—à –∑–∞—Ö–∏—Å—Ç–∏—Ç–∏—Å—è: –≤ —Ç–≤–æ–≥–æ –≤–æ—ó–Ω–∞ –Ω–µ–º–∞ —â–∏—Ç–∞');
            die();
        }
        if (!mt_rand(0, 3)) {
            $attack_type = mt_rant(1, 3, $type);
        } else {
            $attack_type = mt_rand(1, 3);
        }
        $minus = mt_rand(($user->LocalStorageGet('bot-warrior_level_'.$bot_id)*5+5), ($user->LocalStorageGet('bot-warrior_level_'.$bot_id)*6+10));
        if ($type == $attack_type && $type > 0) {
            $new_shield_value = $user->LocalStorageGet('warrior_shield_'.$player_id)-$minus;
            if ($new_shield_value < 0) {
                $text = '‚ùó –©–∏—Ç –∑–∞—Ö–∏—Å—Ç–∏–≤ —Ç–≤–æ–≥–æ –≤–æ—ó–Ω–∞, –∞–ª–µ –≤—ñ–Ω –∑–ª–∞–º–∞–≤—Å—è';
                $user->LocalStorageSet('warrior_shield_'.$player_id, 0);
            } else {
                $text = 'üõ° –©–∏—Ç –∑–∞—Ö–∏—Å—Ç–∏–≤ —Ç–µ–±–µ! (-'.$minus.' –º—ñ—Ü–Ω–æ—Å—Ç—ñ)';
                $user->LocalStorageSet('warrior_shield_'.$player_id, $new_shield_value);
            }
        } else {
            $new_hp_value = $user->LocalStorageGet('warrior_health_'.$player_id)-$minus;
            if ($new_hp_value < 0) {
                $text = 'üíî –¢–≤—ñ–π –≤–æ—ó–Ω –∑–∞–≥–∏–Ω—É–≤';
                $user->LocalStorageSet('warrior_health_'.$player_id, 0);
            } else {
                $text = 'ü©∏ –¢–≤–æ–≥–æ –≤–æ—ó–Ω–∞ –ø–æ—Ä–∞–Ω–µ–Ω–æ! (-'.$minus.'‚ù§)';
                $user->LocalStorageSet('warrior_health_'.$player_id, $new_hp_value);
            }
        }
        $chat->answerCallbackQuery($text, true);
    }
    $result = checkAliveWarriors();
    if (!$result['playerHasAliveWarriors']) {
        $chat->editMessageText('‚öî <b>Combat</b> - –≥—Ä–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞

–í—Å—ñ –≤–∞—à—ñ –≤–æ—ó–Ω–∏ –∑–∞–≥–∏–Ω—É–ª–∏. –í–∏ –ø—Ä–æ–≥—Ä–∞–ª–∏ <b>'.$user->LocalStorageGet('bet').'üí∞</b>', null, update::$btn_id);
        $user->LocalStorageClear();
        die();
    } elseif (!$result['botHasAliveWarriors']) {
        $chat->editMessageText('‚öî <b>Combat</b> - –≥—Ä–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞

–í—Å—ñ –≤–æ—ó–Ω–∏ —Å—É–ø—Ä–æ—Ç–∏–≤–Ω–∏–∫–∞ –∑–∞–≥–∏–Ω—É–ª–∏. –í–∏ –≤–∏–≥—Ä–∞–ª–∏ <b>'.$user->LocalStorageGet('bet').'üí∞</b>', null, update::$btn_id);
        $user->addBal($user->LocalStorageGet('bet')*2);
        $user->LocalStorageClear();
        die();
    }
    $chat->editMessageText('‚è≥', null, update::$btn_id);
    check_bot_move();
    update();
}
function attack($bot_warrior_id, $player_warrior_id) {
    global $user;
    global $chat;
    $bot_warrior = [
        'name' => $user->LocalStorageGet('bot-warrior_name_'.$bot_warrior_id),
        'type' => $user->LocalStorageGet('bot-warrior_type_'.$bot_warrior_id)
    ];
    $player_warrior = [
        'name' => $user->LocalStorageGet('warrior_name_'.$player_warrior_id),
        'type' => $user->LocalStorageGet('warrior_type_'.$player_warrior_id)
    ];
    if ($bot_warrior['type'] == 'infantry') $bot_type = 'üó°';
    if ($bot_warrior['type'] == 'archer') $bot_type = 'üéØ';
    if ($player_warrior['type'] == 'infantry') $player_type = 'üó°';
    if ($player_warrior['type'] == 'archer') $player_type = 'üéØ';
    $keyboard[0][0]['text'] = 'üõ° –ó–∞—Ö–∏—Å—Ç–∏—Ç–∏ –≥–æ–ª–æ–≤—É';
    $keyboard[0][0]['callback_data'] = 'combat-bot_protect_'.$player_warrior_id.'_'.$bot_warrior_id.'_1';
    $keyboard[1][0]['text'] = 'üõ° –ó–∞—Ö–∏—Å—Ç–∏—Ç–∏ —Ç—É–ª—É–±';
    $keyboard[1][0]['callback_data'] = 'combat-bot_protect_'.$player_warrior_id.'_'.$bot_warrior_id.'_2';
    $keyboard[2][0]['text'] = 'üõ° –ó–∞—Ö–∏—Å—Ç–∏—Ç–∏ –Ω–æ–≥–∏';
    $keyboard[2][0]['callback_data'] = 'combat-bot_protect_'.$player_warrior_id.'_'.$bot_warrior_id.'_3';
    $keyboard[3][0]['text'] = 'üí™ –ë–µ–∑ –∑–∞—Ö–∏—Å—Ç—É';
    $keyboard[3][0]['callback_data'] = 'combat-bot_protect_'.$player_warrior_id.'_'.$bot_warrior_id.'_0';
    $chat->editMessageText('‚Äº <b>–í–∏ –∞—Ç–∞–∫–æ–≤–∞–Ω—ñ!</b>
–û–±–µ—Ä—ñ—Ç—å –∑–∞—Ö–∏—Å—Ç

'.$bot_type.''.$bot_warrior['name'].' ‚öî '.$player_warrior['name'].''.$player_type.'', ['inline_keyboard' => $keyboard], update::$btn_id);
    die();
}
function canPlayerAttackBot($playerWarriorId, $botWarriorId) {
    global $user;

    // –ü–æ–ª—É—á–∞–µ–º –ø–æ–∑–∏—Ü–∏–∏ –∏–≥—Ä–æ–∫–∞ –∏ –±–æ—Ç–∞
    $playerPosition = [
        $user->LocalStorageGet('warrior_location-x_' . $playerWarriorId),
        $user->LocalStorageGet('warrior_location-y_' . $playerWarriorId)
    ];

    $botPosition = [
        $user->LocalStorageGet('bot-warrior_location-x_' . $botWarriorId),
        $user->LocalStorageGet('bot-warrior_location-y_' . $botWarriorId)
    ];

    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –≤–æ–∏–Ω–∞ –∏–≥—Ä–æ–∫–∞
    $playerWarriorType = $user->LocalStorageGet('warrior_type_' . $playerWarriorId);

    // –í—ã—á–∏—Å–ª—è–µ–º —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ –º–µ–∂–¥—É –∏–≥—Ä–æ–∫–æ–º –∏ –±–æ—Ç–æ–º
    $dist = distance($playerPosition, $botPosition);

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—Å–ª–æ–≤–∏—è –∞—Ç–∞–∫–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ –≤–æ–∏–Ω–∞
    if ($playerWarriorType == 'infantry' && $dist == 1) {
        return true;
    } elseif ($playerWarriorType == 'archer' && $dist <= 2) {
        return true;
    }
    return false;
}
function BotMove($botWarriorIndex) {
    global $user, $chat;
    if ($user->LocalStorageGet('bot-warrior_health_'.$botWarriorIndex) > 0) {
        $to_coords = getBestMoveForBotWarrior($botWarriorIndex);
        if ($to_coords) {
            $user->LocalStorageSet('bot-warrior_location-x_'.$botWarriorIndex, $to_coords[0]);
            $user->LocalStorageSet('bot-warrior_location-y_'.$botWarriorIndex, $to_coords[1]);
            update();
        } else {
            $w_id = getClosestPlayerWarriorId($botWarriorIndex);
            attack($botWarriorIndex, $w_id);
        }
    }
}

//======================================================================================================================

if ($ex_callback[0] == 'combat-bot') {
    if ($ex_callback[1] == 'start') {
        if (!$ex_callback[2]) {
            $user->LocalStorageClear();
            $user->LocalStorageSet('game', 'combat-bot');
            $user->LocalStorageSet('action', 'start');
            $user->LocalStorageSet('warriors', 0);
            $warriors = '';
        } else {
            $warriors = '
';
            $warrior = R::load('combatwarriors', $ex_callback[2]);
            if (!$warrior) { $chat->answerCallbackQuery('‚ô® –í–æ—ó–Ω–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ'); die(); }
            $user->LocalStorageSet('warriors', ($user->LocalStorageGet('warriors')+1));
            $user->LocalStorageSet('warrior_'.$user->LocalStorageGet('warriors'), $warrior['id']);
            for ($i = 1; $i <= $user->LocalStorageGet('warriors'); $i++) {
                $warrior = R::load('combatwarriors', $user->LocalStorageGet('warrior_'.$i));
                if ($warrior['type'] == 'infantry') $type = 'üó°';
                if ($warrior['type'] == 'archer') $type = 'üéØ';
                $warriors .= $type.' '.$warrior['name'].' ('.$warrior['health'].'‚ù§ | '.$warrior['shield'].'üõ°)
';
            }
        }
        $keyboard[0][0]['text'] = '‚ûï –î–æ–¥–∞—Ç–∏ –≤–æ—ó–Ω–∞ ('.$user->LocalStorageGet('warriors').'/3)';
        $keyboard[0][0]['callback_data'] = 'combat-bot_add-warrior';
        if ($user->LocalStorageGet('warriors') > 0) {
            $keyboard[1][0]['text'] = '‚öî –†–æ–∑–ø–æ—á–∞—Ç–∏';
            $keyboard[1][0]['callback_data'] = 'combat-bot_start-battle';
        }
        $chat->editMessageText('‚öî <b>Combat</b> - —Ñ–æ—Ä–º—É–≤–∞–Ω–Ω—è –≥—Ä—É–ø–∏
'.$warriors, ['inline_keyboard' => $keyboard], update::$btn_id);
    }
    if ($ex_callback[1] == 'end-attack') {
        $user->LocalStorageSet('aliveCount', ($user->LocalStorageGet('aliveCount')-1));
        $user->LocalStorageSet('NextBotIndex', 0);
        $selected = $user->LocalStorageGet('selected');
        $user->LocalStorageSet('selected', null);
        end_attack($ex_callback[2], $selected, $ex_callback[3], true);
    }
    if ($ex_callback[1] == 'attack') {
        $bot_id = $ex_callback[2];
        if ($user->LocalStorageGet('selected')) {
            if (canPlayerAttackBot($user->LocalStorageGet('selected'), $bot_id)) {
                $bot_warrior = [
                    'name' => $user->LocalStorageGet('bot-warrior_name_'.$bot_id),
                    'type' => $user->LocalStorageGet('bot-warrior_type_'.$bot_id)
                ];
                $player_warrior = [
                    'name' => $user->LocalStorageGet('warrior_name_'.$user->LocalStorageGet('selected')),
                    'type' => $user->LocalStorageGet('warrior_type_'.$user->LocalStorageGet('selected'))
                ];
                if ($bot_warrior['type'] == 'infantry') $bot_type = 'üó°';
                if ($bot_warrior['type'] == 'archer') $bot_type = 'üéØ';
                if ($player_warrior['type'] == 'infantry') $player_type = 'üó°';
                if ($player_warrior['type'] == 'archer') $player_type = 'üéØ';
                $keyboard[0][0]['text'] = 'üî™ –ê—Ç–∞–∫–∞ –≥–æ–ª–æ–≤–∏';
                $keyboard[0][0]['callback_data'] = 'combat-bot_end-attack_'.$bot_id.'_1';
                $keyboard[1][0]['text'] = 'üî™ –ê—Ç–∞–∫–∞ —Ç—É–ª—É–±–∞';
                $keyboard[1][0]['callback_data'] = 'combat-bot_end-attack_'.$bot_id.'_2';
                $keyboard[2][0]['text'] = 'üî™ –ê—Ç–∞–∫–∞ –Ω—ñ–≥';
                $keyboard[2][0]['callback_data'] = 'combat-bot_end-attack_'.$bot_id.'_3';
                $chat->editMessageText('‚öî <b>Combat</b> - –∞—Ç–∞–∫–∞

'.$player_type.''.$player_warrior['name'].' ‚öî '.$bot_warrior['name'].''.$bot_type, ['inline_keyboard' => $keyboard], update::$btn_id);
                die();
            } else {
                $chat->answerCallbackQuery('‚ô® –í–∏ –Ω–µ –º–æ–∂–µ—Ç–µ –∞—Ç–∞–∫—É–≤–∞—Ç–∏ —Ü—å–æ–≥–æ –≤–æ—ó–Ω–∞, –±–æ –≤—ñ–Ω –¥–∞–ª–µ–∫–æ –≤—ñ–¥ –≤–∞—Å');
            }
        } else {
            if ($user->LocalStorageGet('bot-warrior_type_' . $bot_id) == 'infantry') $type = 'üó°';
            if ($user->LocalStorageGet('bot-warrior_type_' . $bot_id) == 'archer') $type = 'üéØ';
            $chat->answerCallbackQuery('‚Ñπ –Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ –≤–æ—ó–Ω–∞
'.$user->LocalStorageGet('bot-warrior_name_' . $bot_id).' '.$type.'
'.$user->LocalStorageGet('bot-warrior_health_' . $bot_id).' ‚ù§ | '.$user->LocalStorageGet('bot-warrior_shield_' . $bot_id).' üõ°', true);
            die();
        }
    }
    if ($user->LocalStorageGet('action') == 'start' && $ex_callback[1] == 'add-warrior') {
        if ($user->LocalStorageGet('warriors') >= 3) { $chat->answerCallbackQuery('–ú–∞–∫—Å–∏–º—É–º –º–æ–∂–Ω–∞ –¥–æ–¥–∞—Ç–∏ 3—Ö –≤–æ—ó–Ω—ñ–≤'); die(); }
        $warriors = R::find('combatwarriors', 'user_id = ?', [$user->user['id']]);
        $i = 0;
        foreach ($warriors as $warrior) {
            if ($warrior['health'] > 0) {
                $found = false;
                for ($y = 1; $user->LocalStorageGet('warrior_'.$y); $y++) {
                    if ($user->LocalStorageGet('warrior_'.$y) == $warrior['id']) {
                        $found = true;
                        break;
                    }
                }
                if ($found) continue;
                if ($warrior['type'] == 'infantry') $type = 'üó°';
                if ($warrior['type'] == 'archer') $type = 'üéØ';
                $keyboard[$i][0]['text'] = $type.' '.$warrior['name'];
                $keyboard[$i][0]['callback_data'] = 'combat-bot_start_'.$warrior['id'];
                $i++;
            }
        }
        if (!$keyboard[0][0]['text']) { $chat->answerCallbackQuery('–ë—ñ–ª—å—à–µ –Ω–µ–º–∞ –≤–æ—ó–Ω—ñ–≤ –∫–æ—Ç—Ä–∏—Ö –º–æ–∂–Ω–∞ –¥–æ–¥–∞—Ç–∏'); die(); }
        $keyboard[$i][0]['text'] = 'üîô –ù–∞–∑–∞–¥ üîô';
        $keyboard[$i][0]['callback_data'] = 'combat-bot_start';
        $chat->editMessageText('‚öî <b>Combat</b>
–û–±–µ—Ä–∏ –≤–æ—ó–Ω–∞', ['inline_keyboard' => $keyboard], update::$btn_id);
    }
    if ($ex_callback[1] == 'start-battle') {
        $chat->editMessageText('‚öî <b>Combat</b>
‚è≥ –ß–µ–∫–∞—î–º–æ –ø–æ–∫–∏ —Å—É–ø—Ä–æ—Ç–∏–≤–Ω–∏–∫ –æ–±–µ—Ä–µ –≤–æ—ó–Ω—ñ–≤...', null, update::$btn_id);
        for ($i = 1; $user->LocalStorageGet('warrior_'.$i); $i++) {
            $location = [
                'me' => [[7, 7], [6, 6], [5, 5]],
                'enemy' => [[0, 0], [1, 1], [2, 2]],
            ];
            $warrior = R::load('combatwarriors', $user->LocalStorageGet('warrior_'.$i));
            $user->LocalStorageSet('warrior_name_'.$i, $warrior['name']);
            $user->LocalStorageSet('warrior_type_'.$i, $warrior['type']);
            $user->LocalStorageSet('warrior_health_'.$i, $warrior['health']);
            $user->LocalStorageSet('warrior_shield_'.$i, $warrior['shield']);
            $user->LocalStorageSet('warrior_custom_'.$i, $warrior['custom']);
            $user->LocalStorageSet('warrior_level_'.$i, $warrior['level']);
            $user->LocalStorageSet('warrior_location-x_'.$i, $location['me'][($i-1)][0]);
            $user->LocalStorageSet('warrior_location-y_'.$i, $location['me'][($i-1)][1]);
            //BOT
            $user->LocalStorageSet('bot-warrior_name_'.$i, '–ë–û–¢-'.$i);
            $user->LocalStorageSet('bot-warrior_type_'.$i, $warrior['type']);
            $user->LocalStorageSet('bot-warrior_health_'.$i, 100);
            $user->LocalStorageSet('bot-warrior_shield_'.$i, $warrior['shield']);
            $user->LocalStorageSet('bot-warrior_custom_'.$i, $warrior['custom']);
            $user->LocalStorageSet('bot-warrior_level_'.$i, $warrior['level']);
            $user->LocalStorageSet('bot-warrior_location-x_'.$i, $location['enemy'][($i-1)][0]);
            $user->LocalStorageSet('bot-warrior_location-y_'.$i, $location['enemy'][($i-1)][1]);
            $user->LocalStorageSet('NextBotIndex', 0);
            $user->LocalStorageSet('aliveCount', countAliveWarriors());
        }
        $bet = floor($user->user['balance']*0.05);
        $user->addBal($bet*-1);
        $user->LocalStorageSet('bet', $bet);
        $keyboard[0][0]['text'] = '‚úÖ –†–æ–∑–ø–æ—á–∏–Ω–∞—î–º–æ!';
        $keyboard[0][0]['callback_data'] = 'combat-bot_update';
        $chat->editMessageText('‚öî <b>Combat</b>
–ü—ñ–¥—Ç–≤–µ—Ä–¥—ñ—Ç—å –≥–æ—Ç–æ–≤–Ω—ñ—Å—Ç—å', ['inline_keyboard' => $keyboard], update::$btn_id);
    }
    if ($ex_callback[1] == 'update') {
        update();
    }
    if ($ex_callback[1] == 'select') {
        if ($user->LocalStorageGet('selected') != $ex_callback[2]) {
            $user->LocalStorageSet('selected', $ex_callback[2]);
            if ($user->LocalStorageGet('warrior_type_' . $ex_callback[2]) == 'infantry') $type = 'üó°';
            if ($user->LocalStorageGet('warrior_type_' . $ex_callback[2]) == 'archer') $type = 'üéØ';
            $selected = '== –í–∏ –æ–±—Ä–∞–ª–∏ ==
<em>' . $type . ' ' . $user->LocalStorageGet('warrior_name_' . $ex_callback[2]) . '</em>
' . $user->LocalStorageGet('warrior_health_' . $ex_callback[2]) . '‚ù§ | ' . $user->LocalStorageGet('warrior_shield_' . $ex_callback[2]) . 'üõ°';
        } else $user->LocalStorageSet('selected', null);
        $keyboard = getField();
        $chat->editMessageText('‚öî <b>Combat</b>
–î–æ—Å—Ç—É–ø–Ω–æ —Ö–æ–¥—ñ–≤: <b>'.$user->LocalStorageGet('aliveCount').'</b>
'.$selected, ['inline_keyboard' => $keyboard], update::$btn_id);
    }
    if ($ex_callback[1] == 'coords') {
        if (!$user->LocalStorageGet('selected')) {
            $chat->answerCallbackQuery('üí¢ –û–±–µ—Ä–∏ –≤–æ—ó–Ω–∞ –∫–æ—Ç—Ä–∏–º —Ö–æ—á–µ—à –∑—Ä–æ–±–∏—Ç–∏ —Ö—ñ–¥');
            die();
        }
        $x = $ex_callback[2];
        $y = $ex_callback[3];
        if (check_canMove([$user->LocalStorageGet('warrior_location-x_'.$user->LocalStorageGet('selected')), $user->LocalStorageGet('warrior_location-y_'.$user->LocalStorageGet('selected'))], [$x, $y])) {
            if ($user->LocalStorageGet('aliveCount') > 0) {
                $user->LocalStorageSet('warrior_location-x_'.$user->LocalStorageGet('selected'), $x);
                $user->LocalStorageSet('warrior_location-y_'.$user->LocalStorageGet('selected'), $y);
                $user->LocalStorageSet('selected', null);
                $user->LocalStorageSet('aliveCount', ($user->LocalStorageGet('aliveCount')-1));
                $keyboard = getField();
                $chat->editMessageText('‚öî <b>Combat</b>
–î–æ—Å—Ç—É–ø–Ω–æ —Ö–æ–¥—ñ–≤: <b>'.$user->LocalStorageGet('aliveCount').'</b>', ['inline_keyboard' => $keyboard], update::$btn_id);
                $user->LocalStorageSet('NextBotIndex', 0);
                check_bot_move();
            } else {
                $chat->answerCallbackQuery('üí¢ –ó–∞—Ä–∞–∑ –Ω–µ —Ç–≤—ñ–π —Ö—ñ–¥');
                die();
            }
        } else {
            $chat->answerCallbackQuery('üí¢ –¢–∏ –Ω–µ –º–æ–∂–µ—à —Å—é–¥–∏ –ø–æ—Ö–æ–¥–∏—Ç–∏');
            die();
        }
    }
    if ($ex_callback[1] == 'protect') {
        $attacked = $ex_callback[2];
        $bot_id = $ex_callback[3];
        $attack_type = $ex_callback[4];
        end_attack($bot_id, $attacked, $attack_type);
        die();
    }
}
