<?php
//
// Command: code #
// Text: !–∫–æ–¥ /code #
// Callback: blockcustomcode allowcustomcode #
// Info: /next #
// Syntax: !–∫–æ–¥ [PHP code] #
// Args: 1 #
// Rank: STAR #
//
use api\{Bot as Bot, chat as chat, ChatMember as ChatMember, Log as Log, update as update};
$lst_code_id = R::load('settings', 2);
function codeVerify($current_id) {
    global $lst_code_id;
    if ($lst_code_id['value'] == $current_id) custom_error('[ANTI-LOOPing]', '–£ –í–∞—à–æ–º—É –∫–æ–¥—ñ –≤–∏—è–≤–ª–µ–Ω–∞ –ø–æ–º–∏–ª–∫–∞');
    $lst_code_id->value = $current_id;
    R::store($lst_code_id);
}
if ($cmd[1] == '–≤–∏–∫–æ–Ω–∞—Ç–∏') {
    if ($cmd[2]) {
        $checkscript = R::load('checkscript', $cmd[2]);
        if ($checkscript) {
            if ($checkscript['user_id'] == $user->user['id'] && $checkscript['chat_id'] == $chat->chat['id']) {
                if ($checkscript->confirmed) {
                    codeVerify(update::$message_id);
                    $chat->sendMessage("<b>–í–∞—à –∫–æ–¥:</b>
".$checkscript['code']);
                    eval($checkscript['code']);
                    $chat->sendMessage("–ö–æ–¥ –≤–∏–∫–æ–Ω–∞–Ω–∏–π!");
                    R::trash($checkscript);
                    die();
                } else {
                    custom_error('–ü–æ–º–∏–ª–∫–∞ 403', '–¶–µ–π –∫–æ–¥ —â–µ –Ω–µ –∑–∞–≤–µ—Ä—à–∏–≤ –ø–µ—Ä–µ–≤—ñ—Ä–∫—É CheckScript');
                }
            } else {
                custom_error('–ü–æ–º–∏–ª–∫–∞ 403', '–¶–µ–π –∫–æ–¥ –¥–æ–∑–≤–æ–ª–µ–Ω–æ –≤–∏–∫–æ–Ω—É–≤–∞—Ç–∏ —Ç—ñ–ª—å–∫–∏ —É —á–∞—Ç—ñ –∑–≤—ñ–¥–∫–∏ –∑–∞–ø–∏—Ç—É–≤–∞–ª–∏ –ø–µ—Ä–µ–≤—ñ—Ä–∫—É —Ç–∞ —Ç—ñ–ª—å–∫–∏ —Ç–æ–π —Ö—Ç–æ –∑–∞–ø–∏—Ç—É–≤–∞–≤');
            }
        } else {
            custom_error('–ü–æ–º–∏–ª–∫–∞ 404', '–ö–æ–¥—É –∑ —Ç–∞–∫–∏–º id –Ω–µ —ñ—Å–Ω—É—î');
        }
    } else {
        custom_error('–ù–µ–¥–æ—Å—Ç–∞—Ç–Ω—å–æ –∞—Ä–≥—É–º–µ–Ω—Ç—ñ–≤', '–ü–∏—à—ñ—Ç—å:
!–∫–æ–¥ –≤–∏–∫–æ–Ω–∞—Ç–∏ [—ñd –∫–æ–¥—É]');
    }
    die();
}
if ($chat->chat['tg_id'] == $chat_for_checkcodes) {
    $ex_callback = explode('_', update::$callback_data);
    if ($ex_callback[0] == 'blockcustomcode' or $ex_callback[0] == 'allowcustomcode') {
        $checkscript = R::load('checkscript', $ex_callback[1]);
        $client = R::load('users', $checkscript['user_id']);
        $client_chat = R::load('chats', $checkscript['chat_id']);
        if ($checkscript && $client && $client_chat) {
            $command = json_decode($checkscript['info'], true);
            $client_chat = new chat($client_chat['tg_id']);
            if ($ex_callback[0] == 'allowcustomcode') {
                $checkscript->confirmed = 1;
                R::store($checkscript);
                $client_chat->sendMessage('‚úÖ <b>[CheckScript v2.0F]</b>
<a href="tg://user?id='.$client['tg_id'].'">'.$client['nick'].'</a>, –í–∞—à –∫–æ–¥ #'.$checkscript['id'].' –¥–æ–∑–≤–æ–ª–µ–Ω–∏–π –¥–æ –≤–∏–∫–æ–Ω–∞–Ω–Ω—è

–ü–∏—à—ñ—Ç—å: <code>!–∫–æ–¥ –≤–∏–∫–æ–Ω–∞—Ç–∏ '.$checkscript['id'].'</code>');
                $chat->editMessageText('‚úÖ <b>–í–∏–∫–æ–Ω–∞–Ω–Ω—è –¥–æ–∑–≤–æ–ª–µ–Ω–æ!</b>', null, update::$btn_id);
                die();
            } else {
                //v2.0F, F –∑–Ω–∞—á–∏—Ç—å Fake :)
                $client_chat->sendMessage('üí¢ <b>[CheckScript v2.0F]</b>
<a href="tg://user?id='.$client['tg_id'].'">'.$client['nick'].'</a>, –í–∞—à –∫–æ–¥ #'.$checkscript['id'].' –Ω–µ –ø—Ä–æ–π—à–æ–≤ –ø–µ—Ä–µ–≤—ñ—Ä–∫—É');
                $chat->editMessageText('‚úÖ <b>–ó–∞–±–æ—Ä–æ–Ω–µ–Ω–æ!</b>', null, update::$btn_id);
                R::trash($checkscript); die();
            }
        } else {
            custom_error('–ü–æ–º–∏–ª–∫–∞ 404', '–ù–µ –∑–Ω–∞–π–¥–µ–Ω–æ');
        }
        die();
    }
}
$code = str_replace($cmd[0], '', $msg);
//$code = 'use api\{Bot as Bot, chat as chat, ChatMember as ChatMember, Log as Log, update as update}; '.$code;
if (Permissions::Owner($user->user, true)) {
    codeVerify(update::$message_id);
    $chat->sendMessage("<b>–í–∞—à –∫–æ–¥:</b>
".$code);
    eval($code);
    $chat->sendMessage("–ö–æ–¥ –≤–∏–∫–æ–Ω–∞–Ω–∏–π!");
} else {
    $chat->sendMessage('‚è≥ <b>[CheckScript v2.0F]</b>
–í–∞—à –∫–æ–¥ –ø–µ—Ä–µ–¥–∞–Ω–æ –º–æ–¥—É–ª—é CheckScript, –∑–∞—á–µ–∫–∞–π—Ç–µ —Ö–≤–∏–ª–∏–Ω–∫—É'); //—É–≥—É, —Å–∞–º–µ —Ç–∞–∫
    $checkscript = R::dispense('checkscript');
    $checkscript->user_id = $user->user['id'];
    $checkscript->chat_id = $chat->chat['id'];
    $checkscript->code = $code;
    $checkscript->confirmed = 0;
    R::store($checkscript);
    $owner = new chat($chat_for_checkcodes);
    $keyboard[0][0]['text'] = '‚ùå –ó–∞–±–æ—Ä–æ–Ω–∏—Ç–∏';
    $keyboard[0][0]['callback_data'] = 'blockcustomcode_'.$checkscript['id'];
    $keyboard[0][1]['text'] = '‚úÖ –î–æ–∑–≤–æ–ª–∏—Ç–∏';
    $keyboard[0][1]['callback_data'] = 'allowcustomcode_'.$checkscript['id'];
    $owner->sendMessage('‚ö† <b><a href="tg://user?id='.$user->user['id'].'">'.$user->user['nick'].'</a> —Ö–æ—á–µ –≤–∏–∫–æ–Ω–∞—Ç–∏ –∫–æ–¥ —ñ–∑ —á–∞—Ç—É '.$chat->chat['name'].'</b>
<code>'.$code.'</code>', null, ['inline_keyboard' => $keyboard]); die();
}