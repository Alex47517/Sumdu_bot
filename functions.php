<?php

use api\chat;

class Time {
    //–ø–µ—Ä–µ–æ–±—Ä–∞–∑–æ–≤—ã–≤–∞–µ—Ç —Ç–µ–∫—Å—Ç –≤–∏–¥–∞ "2d4m5s" –≤ —Å–µ–∫—É–Ω–¥—ã
    public static function toTimestamp($str){
        if ($str == 0) return 0;
        $month = self::getDatePart($str, 'M');
        $week = self::getDatePart($str, 'w');
        $day = self::getDatePart($str, 'd');
        $hour = self::getDatePart($str, 'h');
        $minut = self::getDatePart($str, 'm');
        $sec = self::getDatePart($str, 's');

        return $month * 60 * 60 * 24 * 30 + $week * 60 * 60 * 24 * 7 +
            $day * 60 * 60 * 24 + $hour * 60 * 60 + $minut * 60 + $sec;
    }
    //–∏—â–µ—Ç –≤ —Ç–µ–∫—Å—Ç–µ "2d4m5s" (–ø—Ä–∏–º–µ—Ä) —É–∫–∞–∑–∞—Ç–µ–ª—å –≤—Ä–µ–º–µ–Ω–∏, "4m" (–ø—Ä–∏–º–µ—Ä)
    private function getDatePart($str, $part){
        $substr = substr($str, 0, strpos($str, $part));
        if(!$substr) return 0;
        $substr = strrev($substr);
        $res = '';
        for($i = 0; $i < strlen($substr); $i++){
            if(is_numeric($substr[$i])){
                $res .= $substr[$i];
            } else{
                break;
            }
        }
        return (int)strrev($res);
    }
    //—Ñ–æ—Ä–º–∏—Ä—É–µ—Ç –º–∞—Å—Å–∏–≤ –∏–∑ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –¥–Ω–µ–π, —á–∞—Å–æ–≤, –º–∏–Ω—É—Ç, —Å–µ–∫—É–Ω–¥. –ü–æ–ª—É—á–∞—è –Ω–∞ –≤—Ö–æ–¥ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–µ–∫—É–Ω–¥
    private function seconds2times($seconds) {
        $times = array();
        // —Å—á–∏—Ç–∞—Ç—å –Ω—É–ª–∏ –≤ –∑–Ω–∞—á–µ–Ω–∏—è—Ö
        $count_zero = false;
        $periods = array(60, 3600, 86400, 31536000);

        for ($i = 3; $i >= 0; $i--)
        {
            $period = floor($seconds/$periods[$i]);
            if (($period > 0) || ($period == 0 && $count_zero)) {
                $times[$i+1] = $period;
                $seconds -= $period * $periods[$i];
                $count_zero = true;
            }
        }
        $times[0] = $seconds;
        return $times;
    }
    //–ø–µ—Ä–µ–æ–±—Ä–∞–∑–æ–≤—ã–≤–∞–µ—Ç —Å–µ–∫—É–Ω–¥—ã –≤ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏, –ø—Ä–∏–º–µ—Ä: 2 –¥–Ω—è, 6 —á–∞—Å–æ–≤, 7 –º–∏–Ω. 9 —Å–µ–∫.
    public static function sec2time_txt($w_time) {
        if ($w_time == 'e') return '–≤—ñ—á–Ω—ñ—Å—Ç—å';
        $t = self::seconds2times($w_time);
        $time = '';
        if ($t[3] && $t[3] != 0) {
            $u = self::days($t[3]);
            $time .= $t[3].' '.$u.' ';
        }
        if ($t[2] && $t[2] != 0) {
            $u = self::hours($t[2]);
            $time .= $t[2].' '.$u.' ';
        }
        if ($t[1] && $t[1] != 0) {
            $time .= $t[1].' —Ö–≤. ';
        }
        if ($t[0] && $t[0] != 0) {
            $time .= $t[0].' —Å–µ–∫. ';
        }
        return $time;
    }
    //–≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç —Å–ª–æ–≤–∞ "–¥–µ–Ω—å" –¥–ª—è –≤—Ö–æ–¥–Ω–æ–≥–æ —á–∏—Å–ª–∞
    private function days($days) {
        $a=substr($days,strlen($days)-1,1);
        if($a==1) $str="–¥–æ–±–∞";
        if($a==2 || $a==3 || $a==4) $str="–¥–æ–±–∏";
        if($a==5 || $a==6 || $a==7 || $a==8 || $a==9 || $a==0) $str="–¥—ñ–±";
        if ($days==11 or $days==12 or $days==13 or $days==14) $str="–¥—ñ–±";
        return $str;
    }
    //–≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç —Å–ª–æ–≤–∞ "—á–∞—Å" –¥–ª—è –≤—Ö–æ–¥–Ω–æ–≥–æ —á–∏—Å–ª–∞
    private function hours($hour) {
        $a=substr($hour,strlen($hour)-1,1);
        if($a==1) $str="–≥–æ–¥–∏–Ω–∞";
        if($a==2 || $a==3 || $a==4) $str="–≥–æ–¥–∏–Ω–∏";
        if($a==5 || $a==6 || $a==7 || $a==8 || $a==9 || $a==0) $str="–≥–æ–¥–∏–Ω";
        if ($hour==11 or $hour==12 or $hour==13 or $hour==14) $str="–≥–æ–¥–∏–Ω";
        return $str;
    }
}
function menu() {
    global $user;
    global $chat;
    $user->update('display');
    $chat->sendMessage('üîÖ <b>–í–∏ –∑–∞–≤–µ—Ä—à–∏–ª–∏ —É—Å—ñ –∞–∫—Ç–∏–≤–Ω—ñ —Å–µ—Å—Å—ñ—ó</b>'); die();
}
function args_error($action) {
    global $chat;
    $file = R::load('commandfiles', $action['file_id']);
    $chat->sendMessage('‚ô® <b>–ù–µ–¥–æ—Å—Ç–∞—Ç–Ω—å–æ –∞—Ä–≥—É–º–µ–Ω—Ç—ñ–≤</b>

<b>–ö–æ–º–∞–Ω–¥–∞: </b>'.$file['name'].'
<b>–°–∏–Ω—Ç–∞–∫—Å–∏—Å: </b>'.$file['syntax'].'

<em>'.$file['info'].'</em>'); die();
}
function custom_error($title, $description, $exit = false) {
    global $chat;
    if ($exit) $exit_text = '<em>–î–ª—è –≤–∏—Ö–æ–¥—É - /start</em>'; else $exit_text = null;
    $chat->sendMessage('‚ô® <b>'.$title.'</b>

'.$description.'

'.$exit_text); die();
}
function translit_sef($value) {
    $converter = array(
        '–∞' => 'a',    '–±' => 'b',    '–≤' => 'v',    '–≥' => 'g',    '–¥' => 'd',
        '–µ' => 'e',    '—ë' => 'e',    '–∂' => 'zh',   '–∑' => 'z',    '–∏' => 'i',
        '–π' => 'y',    '–∫' => 'k',    '–ª' => 'l',    '–º' => 'm',    '–Ω' => 'n',
        '–æ' => 'o',    '–ø' => 'p',    '—Ä' => 'r',    '—Å' => 's',    '—Ç' => 't',
        '—É' => 'u',    '—Ñ' => 'f',    '—Ö' => 'h',    '—Ü' => 'c',    '—á' => 'ch',
        '—à' => 'sh',   '—â' => 'sch',  '—å' => '',     '—ã' => 'y',    '—ä' => '',
        '—ç' => 'e',    '—é' => 'yu',   '—è' => 'ya',   '—ñ' => 'i',    '—ó' => 'iy',

        '–ê' => 'A',    '–ë' => 'B',    '–í' => 'V',    '–ì' => 'G',    '–î' => 'D',
        '–ï' => 'E',    '–Å' => 'E',    '–ñ' => 'Zh',   '–ó' => 'Z',    '–ò' => 'I',
        '–ô' => 'Y',    '–ö' => 'K',    '–õ' => 'L',    '–ú' => 'M',    '–ù' => 'N',
        '–û' => 'O',    '–ü' => 'P',    '–†' => 'R',    '–°' => 'S',    '–¢' => 'T',
        '–£' => 'U',    '–§' => 'F',    '–•' => 'H',    '–¶' => 'C',    '–ß' => 'Ch',
        '–®' => 'Sh',   '–©' => 'Sch',  '–¨' => '',     '–´' => 'Y',    '–™' => '',
        '–≠' => 'E',    '–Æ' => 'Yu',   '–Ø' => 'Ya',   '–Ü' => 'I',    '–á' => 'Iy',
    );

    $value = mb_strtolower($value);
    $value = strtr($value, $converter);
    $value = mb_ereg_replace('[^-0-9a-z]', '-', $value);
    $value = mb_ereg_replace('[-]+', '-', $value);
    $value = trim($value, '-');

    return $value;
}
function translit_file($filename) {
    $converter = array(
        '–∞' => 'a',    '–±' => 'b',    '–≤' => 'v',    '–≥' => 'g',    '–¥' => 'd',
        '–µ' => 'e',    '—ë' => 'e',    '–∂' => 'zh',   '–∑' => 'z',    '–∏' => 'i',
        '–π' => 'y',    '–∫' => 'k',    '–ª' => 'l',    '–º' => 'm',    '–Ω' => 'n',
        '–æ' => 'o',    '–ø' => 'p',    '—Ä' => 'r',    '—Å' => 's',    '—Ç' => 't',
        '—É' => 'u',    '—Ñ' => 'f',    '—Ö' => 'h',    '—Ü' => 'c',    '—á' => 'ch',
        '—à' => 'sh',   '—â' => 'sch',  '—å' => '',     '—ã' => 'y',    '—ä' => '',
        '—ç' => 'e',    '—é' => 'yu',   '—è' => 'ya',   '—ñ' => 'i',    '—ó' => 'iy',

        '–ê' => 'A',    '–ë' => 'B',    '–í' => 'V',    '–ì' => 'G',    '–î' => 'D',
        '–ï' => 'E',    '–Å' => 'E',    '–ñ' => 'Zh',   '–ó' => 'Z',    '–ò' => 'I',
        '–ô' => 'Y',    '–ö' => 'K',    '–õ' => 'L',    '–ú' => 'M',    '–ù' => 'N',
        '–û' => 'O',    '–ü' => 'P',    '–†' => 'R',    '–°' => 'S',    '–¢' => 'T',
        '–£' => 'U',    '–§' => 'F',    '–•' => 'H',    '–¶' => 'C',    '–ß' => 'Ch',
        '–®' => 'Sh',   '–©' => 'Sch',  '–¨' => '',     '–´' => 'Y',    '–™' => '',
        '–≠' => 'E',    '–Æ' => 'Yu',   '–Ø' => 'Ya',   '–Ü' => 'I',    '–á' => 'Iy',
    );
    $new = '';
    $file = pathinfo(trim($filename));
    if (!empty($file['dirname']) && @$file['dirname'] != '.') {
        $new .= rtrim($file['dirname'], '/') . '/';
    }
    if (!empty($file['filename'])) {
        $file['filename'] = str_replace(array(' ', ','), '-', $file['filename']);
        $file['filename'] = strtr($file['filename'], $converter);
        $file['filename'] = mb_ereg_replace('[-]+', '-', $file['filename']);
        $file['filename'] = trim($file['filename'], '-');
        $new .= $file['filename'];
    }
    if (!empty($file['extension'])) {
        $new .= '.' . $file['extension'];
    }
    return $new;
}
function new_command($command) {
    if ($command['text']) $add .= '
// Text: '.$command['text'].' #';
    if ($command['display']) $add .= '
// Display: '.$command['display'].' #';
    if ($command['callback']) $add .= '
// Callback: '.$command['callback'].' #';
    $filename = translit_sef($command['name']).'_custom.php';
    $file_data = '<?php
//
// Command: '.$command['name'].' #'.$add.'
// Info: '.$command['info'].' #
// Syntax: '.$command['syntax'].' #
// Args: '.$command['args'].' #
// Rank: '.$command['rank'].' #
//
'.$command['code'];
    $new_command_file = fopen(__DIR__.'/commands/'.$filename, 'w+');
    fwrite($new_command_file, $file_data);
    fclose($new_command_file);
    return true;
}
function mute($user_id, $time, $reason, $by, $send_msg = true) {
    if (!$reason) $reason = '[–ù–µ –≤–∫–∞–∑–∞–Ω–∞]';
    if ($time == 0) {
        $until_date = date('U')+1;
        $str_time = '–Ω–∞–∑–∞–≤–∂–¥–∏';
    } else {
        $until_date = date('U')+$time;
        $str_time = Time::sec2time_txt($time);
    }
    global $chat;
    $s_user = R::load('users', $user_id);
    if ($s_user) {
        if ($send_msg) {
            $chat->sendMessage('üë∫ <b>–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á—É <a href="tg://user?id=' . $s_user['tg_id'] . '">' . $s_user['nick'] . '</a> –≤–∏–¥–∞–Ω–æ –º—É—Ç</b>

<b>–ê–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä: </b>' . $by . '
<b>–ü—Ä–∏—á–∏–Ω–∞: </b>' . $reason . '
<b>–°—Ä–æ–∫: </b>' . $str_time . '');
        }
        $permissions = [
            'can_send_messages' => false,
            'can_send_media_messages' => false,
            'can_send_polls' => false,
            'can_send_other_messages' => false,
            'can_change_info' => false,
            'can_add_web_page_previews' => false,
            'can_invite_users' => false,
            'can_pin_messages' => false,
        ];
        return $chat->restrictChatMember($s_user['tg_id'], $permissions, $until_date);
    } else {
        return false;
    }
}
function unmute($user_id, $by, $send_msg = true) {
    global $chat;
    $s_user = R::load('users', $user_id);
    if ($s_user) {
        if ($send_msg) {
            $chat->sendMessage('‚úÖ <b>–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ <a href="tg://user?id=' . $s_user['tg_id'] . '">' . $s_user['nick'] . '</a> —Ä–æ–∑–º—É—á–µ–Ω–æ</b>

<b>–ê–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä: </b>' . $by . '');
        }
        $permissions = [
            'can_send_messages'         => true,
            'can_send_media_messages'   => true,
            'can_send_polls'            => true,
            'can_send_other_messages'   => true,
            'can_add_web_page_previews' => true,
        ];
        $until_date = 0;
        return $chat->restrictChatMember($s_user['tg_id'], $permissions, $until_date);
    } else {
        return false;
    }
}
function ban($user_id, $time, $reason, $by) {
    if (!$reason) $reason = '[–ù–µ –≤–∫–∞–∑–∞–Ω–∞]';
    if ($time == 0) {
        $until_date = date('U')+1;
        $str_time = '–Ω–∞–∑–∞–≤–∂–¥–∏';
    } else {
        $until_date = date('U')+$time;
        $str_time = Time::sec2time_txt($time);
    }
    global $chat;
    $s_user = R::load('users', $user_id);
    if ($s_user) {
        $chat->sendMessage('üìõ <b>–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ <a href="tg://user?id='.$s_user['tg_id'].'">'.$s_user['nick'].'</a> –∑–∞–±–∞–Ω–µ–Ω–æ —É —á–∞—Ç—ñ</b>

<b>–ê–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä: </b>'.$by.'
<b>–ü—Ä–∏—á–∏–Ω–∞: </b>'.$reason.'
<b>–°—Ä–æ–∫: </b>'.$str_time.'');
        $result = $chat->banChatMember($s_user['tg_id'], $until_date);
        $pm = new Chat($s_user['tg_id']);
        $keyboard[0][0]['text'] = '–ü–æ–≤–µ—Ä–Ω—É—Ç–∏—Å—è —É —á–∞—Ç';
        $keyboard[0][0]['url'] = 'https://t.me/+_pjx_wfyvjdlMzli';
        $pm->sendMessage('üìõ <b>–í–∏ –±—É–ª–∏ –∑–∞–±–ª–æ–∫–æ–≤–∞–Ω—ñ —É —á–∞—Ç—ñ "'.$chat->chat['name'].'"</b>

<b>–ü—Ä–∏—á–∏–Ω–∞: </b>'.$reason.'
<b>–°—Ä–æ–∫: </b>'.$str_time.'

<em>–ü—ñ—Å–ª—è –∑–∞–∫—ñ–Ω—á–µ–Ω–Ω—è —Ç–µ—Ä–º—ñ–Ω—É –±–ª–æ–∫—É–≤–∞–Ω–Ω—è –í–∏ –º–æ–∂–µ—Ç–µ –ø–æ–≤–µ—Ä–Ω—É—Ç–∏—Å—è –Ω–∞—Ç–∏—Å–Ω—É–≤—à–∏ –∫–Ω–æ–ø–∫—É –Ω–∏–∂—á–µ</em>', null, ['inline_keyboard' => $keyboard]);
        return $result;
    } else {
        return false;
    }
}
function unban($user_id, $by) {
    global $chat;
    $s_user = R::load('users', $user_id);
    if ($s_user) {
        $chat->sendMessage('‚úÖ <b>–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á <a href="tg://user?id='.$s_user['tg_id'].'">'.$s_user['nick'].'</a> —Ä–æ–∑–±–∞–Ω–µ–Ω–∏–π</b>

<b>–ê–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä: </b>'.$by.'');
        $result = $chat->unbanChatMember($s_user['tg_id']);
        $pm = new Chat($s_user['tg_id']);
        $keyboard[0][0]['text'] = '–ü–æ–≤–µ—Ä–Ω—É—Ç–∏—Å—è —É —á–∞—Ç';
        $keyboard[0][0]['url'] = 'https://t.me/+_pjx_wfyvjdlMzli';
        $pm->sendMessage('‚úÖ <b>–ê–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä —á–∞—Ç—É "'.$chat->chat['name'].'" —Ä–æ–∑–±–ª–æ–∫—É–≤–∞–≤ –í–∞—Å</b>

–í–∏ –º–æ–∂–µ—Ç–µ –ø–æ–≤–µ—Ä–Ω—É—Ç–∏—Å—è –Ω–∞—Ç–∏—Å–Ω—É–≤—à–∏ –∫–Ω–æ–ø–∫—É –Ω–∏–∂—á–µ', null, ['inline_keyboard' => $keyboard]);
        return $result;
    } else {
        return false;
    }
}
function gen_password($length = 6) {
    $password = '';
    $arr = array(
        'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm',
        'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z',
        'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M',
        'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z',
        '1', '2', '3', '4', '5', '6', '7', '8', '9', '0'
    );

    for ($i = 0; $i < $length; $i++) {
        $password .= $arr[random_int(0, count($arr) - 1)];
    }
    return $password;
}
function replace_custom_info($custom_info, $user) {
    $custom_info = str_replace('%id', $user['id'], $custom_info);
    $custom_info = str_replace('%nick', $user['nick'], $custom_info);
    $custom_info = str_replace('%rank', $user['rank'], $custom_info);
    $custom_info = str_replace('%balance', $user['balance'], $custom_info);
    $custom_info = str_replace('%group', $user['grp'], $custom_info);
    $custom_info = str_replace('%tg', '<a href="tg://user?id='.$user['tg_id'].'">'.$user['tg_id'].'</a>', $custom_info);
    $custom_info = str_replace('%date', $user['reg_date'], $custom_info);
    return $custom_info;
}
function getEmojiNum($num) {
    if ($num >= 0 && $num < 10) {
        return ''.$num.'‚É£';
    } else {
        return $num.'.';
    }
}