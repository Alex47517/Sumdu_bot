<?php
require __DIR__.'/../config/start.php';
require __DIR__.'/../config/loader.php';
require_once '/home/alex/websites/bot.sumdubot.pp.ua/test/vendor/autoload.php';
set_time_limit(0); //–ó–Ω—ñ–º–∞—î–º–æ –æ–±–º–µ–∂–µ–Ω–Ω—è –ø–æ —á–∞—Å—É –Ω–∞ –≤–∏–∫–æ–Ω–∞–Ω–Ω—è —Å–∫—Ä–∏–ø—Ç—É
use api\{chat as chat, Bot as Bot, stats as stats, Log as Log};
use Orhanerday\OpenAi\OpenAi;
$user = new User();
$bot = new Bot($bot_token);
if(!$user->loadByID($argv[1])) die('[DAEMON/AVIATOR] User not found');
$chat = new chat($user->user['tg_id']);
$userId = $argv[1]; // ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
$theme = $argv[2]; // –¢–µ–º–∞ –≤–∏–∫—Ç–æ—Ä–∏–Ω—ã
$question = $argv[3]; // –ù–æ–º–µ—Ä –≤–æ–ø—Ä–æ—Å–∞
//$chat->sendMessage($question);
$themes = [
    1 => '–ø—Ä–æ–≥—Ä–∞–º—É–≤–∞–Ω–Ω—è',
    2 => '–º–æ–¥–µ–ª—é–≤–∞–Ω–Ω—è',
    3 => '—Ç–µ–ª–µ–∫–æ–º',
    4 => '–º–∞—Ç–µ–º–∞—Ç–∏–∫–∞',
    5 => '–µ–ª–µ–∫—Ç—Ä–æ–Ω—ñ–∫–∞',
];
$letters = ['–ê', '–ë', '–í', '–ì'];
echo '[1:'.$user->user['nick'].'] ok!';
// –ó–∞–ø—Ä–æ—Å –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è ID –≤–∏–∫—Ç–æ—Ä–∏–Ω, –∫–æ—Ç–æ—Ä—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –µ—â–µ –Ω–µ —Ä–µ—à–∞–ª –ø–æ –∑–∞–¥–∞–Ω–Ω–æ–π —Ç–µ–º–µ
$sql = "SELECT q.id 
        FROM quiz q 
        LEFT JOIN quizresults qr ON q.id = qr.question AND qr.user = ?
        WHERE qr.id IS NULL AND q.theme = ?";
$quizIds = R::getCol($sql, [$userId, $theme]);
echo '[2] ok!';
if (count($quizIds) > 0) {
    $randomKey = array_rand($quizIds);
    $randomQuizId = $quizIds[$randomKey];

    $quiz = R::load('quiz', $randomQuizId); // –ó–∞–≥—Ä—É–∂–∞–µ–º –æ–±—ä–µ–∫—Ç –≤–∏–∫—Ç–æ—Ä–∏–Ω—ã
    $answers = R::getAll('SELECT * FROM `quizanswers` WHERE `quiz` = ? ORDER BY `id` ASC', [$quiz['id']]);
} else {
    echo '[3] ok!';
    //ssage('TEST!');
    echo '[3.5] ok!';
    $chat->editMessageText('<b>üôÄ –û–≥–æ! –¢–∏ –≤—ñ–¥–ø–æ–≤—ñ–≤ –Ω–∞ —É—Å—ñ –ø–∏—Ç–∞–Ω–Ω—è –∑ –±–∞–∑–∏. –ê–ª–µ –Ω–µ –∑–∞—Å–º—É—á—É–π—Å—è, –∑–∞—Ä–∞–∑ —è –ø—Ä–∏–¥—É–º–∞—é —â–æ—Å—å –Ω–æ–≤–µ–Ω—å–∫–µ :)</b>', null, $user->LocalStorageGet('msg_id'));
    echo '[4] GPT STARTED!';
    $openai = new OpenAI('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');
    $complete = $openai->chat([
        'model' => 'gpt-3.5-turbo',
        'messages' => [
            [
                "role" => "system",
                "content" => "–¢–≤–æ—î –∑–∞–≤–¥–∞–Ω–Ω—è - —Å—Ç–≤–æ—Ä–∏—Ç–∏ —Å–∫–ª–∞–¥–Ω–µ —Ç–µ–æ—Ä–µ—Ç–∏—á–Ω–µ –ø–∏—Ç–∞–Ω–Ω—è –∑ –µ–ª–µ–∫—Ç—Ä–æ–Ω—ñ–∫–∏ –¥–ª—è —Å—Ç—É–¥–µ–Ω—Ç—ñ–≤ —É–Ω—ñ–≤–µ—Ä—Å–∏—Ç–µ—Ç—É –∑ —Ä—ñ–≤–Ω–µ–º —Å–∫–ª–∞–¥–Ω–æ—Å—Ç—ñ 10, —è–∫–µ –≤–∏–º–∞–≥–∞—î –≥–ª–∏–±–æ–∫–∏—Ö –∑–Ω–∞–Ω—å —É —Ü—ñ–π –æ–±–ª–∞—Å—Ç—ñ. –ü–æ–¥–±–∞–π –ø—Ä–æ —Ç–µ, —â–æ–± 4 –≤–∞—Ä—ñ–∞–Ω—Ç–∏ –≤—ñ–¥–ø–æ–≤—ñ–¥–µ–π –Ω–µ –º—ñ—Å—Ç–∏–ª–∏ —Ñ–∞–∫—Ç–∏—á–Ω–∏—Ö –ø–æ–º–∏–ª–æ–∫ —ñ –±—É–ª–∏ –ª–æ–≥—ñ—á–Ω–æ –∫–æ—Ä–µ–∫—Ç–Ω–∏–º–∏. –í –∫—ñ–Ω—Ü—ñ —á—ñ—Ç–∫–æ –≤–∫–∞–∂–∏ –ø—Ä–∞–≤–∏–ª—å–Ω—É –±—É–∫–≤—É —É –∫–≤–∞–¥—Ä–∞—Ç–Ω–∏—Ö –¥—É–∂–∫–∞—Ö, –Ω–µ –¥–æ–ø—É—Å–∫–∞—é—á–∏ –ø–æ–º–∏–ª–æ–∫.
–ü–∏—Ç–∞–Ω–Ω—è: [–ó–∞–¥–∞–π —Å–∫–ª–∞–¥–Ω–µ —Ç–µ–æ—Ä–µ—Ç–∏—á–Ω–µ –ø–∏—Ç–∞–Ω–Ω—è, —è–∫–µ –ø–æ—Ç—Ä–µ–±—É—î –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è –≥–ª–∏–±–æ–∫–∏—Ö –∑–Ω–∞–Ω—å]
–ê) [–≤–∞—Ä—ñ–∞–Ω—Ç –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ] –ë) [–≤–∞—Ä—ñ–∞–Ω—Ç –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ] 
–í) [–≤–∞—Ä—ñ–∞–Ω—Ç –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ] –ì) [–≤–∞—Ä—ñ–∞–Ω—Ç –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ] 
[–ü—Ä–∞–≤–∏–ª—å–Ω–∞ –ª—ñ—Ç–µ—Ä–∞]"
            ],
            [
                "role" => "user",
                "content" => '–°—Ç–≤–æ—Ä–∏ –¥—É–∂–µ —Å–∫–ª–∞–¥–Ω–µ –∑–∞–≤–¥–∞–Ω–Ω—è. –¢–µ–º–∞: '.$themes[$theme].'. –û–±–æ–≤\'—è–∑–∫–æ–≤–æ –≤–∫–∞–∂–∏ –ø—Ä–∞–≤–∏–ª—å–Ω—É –ª—ñ—Ç–µ—Ä—É —É –∫—ñ–Ω—Ü—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è. –¢–æ–±—Ç–æ, —è–∫—â–æ –ø—Ä–∞–≤–∏–ª—å–Ω–∞ –ª—ñ—Ç–µ—Ä–∞ –ê (–∞–ª–µ –Ω–µ –∑–æ—Å–µ—Ä–µ–¥–∂—É–π—Å—è —Å–∞–º–µ –Ω–∞ –ê), —Ç–æ —Ç–∏ –ø–æ–≤–∏–Ω–µ–Ω –≤–∫–∞–∑–∞—Ç–∏ —ó—ó –æ—Å—å —Ç–∞–∫: [–ê]',
            ]
        ],
        'temperature' => 1.0,
        'max_tokens' => 1000,
        'frequency_penalty' => 0,
        'presence_penalty' => 0,
    ]);
    //$text = end($complete)['text'];
    $text = json_decode($complete, true)['choices'][0]['message']['content'];
    if (!$text) {
        $file = fopen('log.txt', 'w+');
        fwrite($file, var_export($openai->getCURLInfo(),true));
        fclose($file);
        $user->addBal(100);
        //$chat->sendMessage('[INFO] –í–∞—à –±–∞–ª–∞–Ω—Å –ø–æ–ø–æ–≤–Ω–µ–Ω–æ –Ω–∞ 300üí∞');
        $keyboard[0][0]['text'] = 'üîú –î–∞–ª—ñ üîú';
        $keyboard[0][0]['callback_data'] = 'quiz_next_'.($question+1);
        $chat->editMessageText('<b>üí¢ –°—Ö–æ–∂–µ, —â–æ –≤ –Ω–∞—Å –≤–∏–Ω–∏–∫–ª–∞ –ø—Ä–æ–±–ª–µ–º–∞. –î–∞–≤–∞–π –¥–æ–º–æ–≤–∏–º–æ—Å—è —Ç–∞–∫: –Ø –¥–∞–º —Ç–æ–±—ñ 100üí∞, –∞–ª–µ —Ç–∏ –Ω–∞–¥—ñ—à–ª–µ—à @alex47517 —Ü–µ–π —Ç–µ–∫—Å—Ç:</b>

<code>'.var_export(json_decode($complete, true),true).'</code>', ['inline_keyboard' => $keyboard], $user->LocalStorageGet('msg_id')); die();
    }
    //filters
    $question_tmp = trim(explode('–ê)', $text)[0]);
    $answers_text = explode('–ê)', $text)[1];
    $answers[0] = trim(str_replace('–ë)', '', trim(explode('–ë)', $answers_text)[0])));
    $answers[1] = trim(str_replace('–í)', '', trim(explode('–í)', explode('–ë)', $answers_text)[1])[0])));
    $answers[3] = trim(str_replace('–ì)', '', trim(explode('–ì)', explode('–í)', $answers_text)[1])[0])));
    $answers[4] = trim(str_replace('[', '', trim(explode('[', explode('–ì)', $answers_text)[1])[0])));
    $correctAnswerLetter = mb_substr($text, mb_strrpos($text, '[') + 1, 1);
    $correctAnswerIndex = mb_strpos('–ê–ë–í–ì', $correctAnswerLetter);
    if (empty($question_tmp) || count($answers) != 4 || $correctAnswerIndex === false) {
        echo "–ü–æ–º–∏–ª–∫–∞: –Ω–µ –≤–¥–∞–ª–æ—Å—è —Ä–æ–∑—ñ–±—Ä–∞—Ç–∏ —Ç–µ–∫—Å—Ç –∑–∞ –≤–∫–∞–∑–∞–Ω–∏–º —Ñ–æ—Ä–º–∞—Ç–æ–º.\n";
        $keyboard[0][0]['text'] = 'üîú –î–∞–ª—ñ üîú';
        $keyboard[0][0]['callback_data'] = 'quiz_next_'.$question;
        $chat->editMessageText('<b>üí¢ –°—Ö–æ–∂–µ, —â–æ –≤ –Ω–∞—Å –≤–∏–Ω–∏–∫–ª–∞ –ø—Ä–æ–±–ª–µ–º–∞. –î–∞–≤–∞–π –¥–æ–º–æ–≤–∏–º–æ—Å—è —Ç–∞–∫: –Ø –¥–∞–º —Ç–æ–±—ñ 100üí∞, –∞–ª–µ —Ç–∏ –Ω–∞–¥—ñ—à–ª–µ—à @alex47517 —Ü–µ–π —Ç–µ–∫—Å—Ç:</b>

<code>[ERR] Failed to parse ChatGPT response</code>
<code>'.$text.'</code>', ['inline_keyboard' => $keyboard], $user->LocalStorageGet('msg_id')); die();
    } else {
        // –í–∏–≤—ñ–¥ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ñ–≤
        echo "–ü–∏—Ç–∞–Ω–Ω—è: $question_tmp\n";
        echo "–í–∞—Ä—ñ–∞–Ω—Ç–∏ –≤—ñ–¥–ø–æ–≤—ñ–¥–µ–π: " . implode(", ", array_map('trim', $answers)) . "\n";
        echo "–ü—Ä–∞–≤–∏–ª—å–Ω–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥—å: $correctAnswerIndex\n";
        // –í–∏–≤—ñ–¥ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ñ–≤
        $quiz = R::dispense('quiz');
        $quiz->question = $question_tmp;
        $quiz->theme = $theme;
        R::store($quiz);
        Log::admin('QUIZ/SUCCESS-GPT', ' | <a href="tg://user?id='.$user->user['tg_id'].'">'.$user->user['nick'].'</a>: <code>'.$text.'</code>');
        var_dump($answers);
        $is_correct = false;
        foreach ($answers as $key => $ans) {
            $answer = R::dispense('quizanswers');
            $answer->quiz = $quiz['id'];
            $answer->answer = $ans;
            if ($key == $correctAnswerIndex) { $answer->correct = 1; $is_correct = true; }
            else $answer->correct = 0;
            R::store($answer);
        }
        $answers = R::getAll('SELECT * FROM `quizanswers` WHERE `quiz` = ? ORDER BY `id` ASC', [$quiz['id']]);
        if (!$answers[3]['answer'] or !$is_correct) {
            R::trash($quiz);
            $keyboard[0][0]['text'] = 'üîú –î–∞–ª—ñ üîú';
            $keyboard[0][0]['callback_data'] = 'quiz_next_'.$question;
            $chat->editMessageText('<b>üí¢ –°—Ö–æ–∂–µ, —â–æ –≤ –Ω–∞—Å –≤–∏–Ω–∏–∫–ª–∞ –ø—Ä–æ–±–ª–µ–º–∞. –î–∞–≤–∞–π –¥–æ–º–æ–≤–∏–º–æ—Å—è —Ç–∞–∫: –Ø –∑–∞—Ä–∞—Ö—É—é —Ü–µ –ø–∏—Ç–∞–Ω–Ω—è, –∞–ª–µ —Ç–∏ —Å–ø—Ä–æ–±—É—î—à —â–µ —Ä–∞–∑:</b>

<code>[ERR] Failed to parse ChatGPT response</code>
<code>'.$text.'</code>', ['inline_keyboard' => $keyboard], $user->LocalStorageGet('msg_id')); die();
        }
    }
}
$answers_text = '';
var_dump($answers);
foreach ($answers as $key => $answer) {
    $answers_text .= '<b>'.$letters[$key].')</b> '.$answer['answer'].'
';
    if ($answer['correct']) {
        $correct_answer = $letters[$key].') '.$answer['answer'];
    }
    $keyboard[0][$key]['text'] = $letters[$key];
    $keyboard[0][$key]['callback_data'] = 'quiz_answer_'.$quiz['id'].'_'.$key.'_'.($question+1);
}
$chat->editMessageText('<b>‚ùì '.$question.'/10 ></b> '.mb_convert_case($themes[$theme], MB_CASE_TITLE, "UTF-8").' [‚è∞ 45 —Å–µ–∫.]

'.$quiz['question'].'
<em>= –û–±–µ—Ä–∏ 1 –≤—ñ–¥–ø–æ–≤—ñ–¥—å: =</em>
'.$answers_text, ['inline_keyboard' => $keyboard], $user->LocalStorageGet('msg_id'));
sleep(45);
$keyboard = null;
$keyboard[0][0]['text'] = 'üîú –î–∞–ª—ñ üîú';
$keyboard[0][0]['callback_data'] = 'quiz_answer_'.$quiz['id'].'_-1_'.($question+1);
$chat->editMessageText('<b>‚ùì '.$question.'/10 ></b> '.mb_convert_case($themes[$theme], MB_CASE_TITLE, "UTF-8").'

>> <b>–ß–ê–° –í–ò–ß–ï–†–ü–ê–ù–û!</b>

–ü—Ä–∞–≤–∏–ª—å–Ω–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥—å:
<em>'.$correct_answer.'</em>', ['inline_keyboard' => $keyboard], $user->LocalStorageGet('msg_id'));